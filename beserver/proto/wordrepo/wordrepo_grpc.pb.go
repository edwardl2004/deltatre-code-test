// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wordrepo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordRepoClient is the client API for WordRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordRepoClient interface {
	// SearchWord finds out if a word exists in the list.
	SearchWord(ctx context.Context, in *SearchWordRequest, opts ...grpc.CallOption) (*SearchWordResponse, error)
	// UpdateWordList updates the search word list
	UpdateWordList(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*UpdateWordResponse, error)
	// GetTopWords returns the top 5 words and the counts they are searched
	GetTopWords(ctx context.Context, in *GetTopWordRequest, opts ...grpc.CallOption) (*GetTopWordResponse, error)
}

type wordRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewWordRepoClient(cc grpc.ClientConnInterface) WordRepoClient {
	return &wordRepoClient{cc}
}

func (c *wordRepoClient) SearchWord(ctx context.Context, in *SearchWordRequest, opts ...grpc.CallOption) (*SearchWordResponse, error) {
	out := new(SearchWordResponse)
	err := c.cc.Invoke(ctx, "/wordrepo.WordRepo/SearchWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordRepoClient) UpdateWordList(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*UpdateWordResponse, error) {
	out := new(UpdateWordResponse)
	err := c.cc.Invoke(ctx, "/wordrepo.WordRepo/UpdateWordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordRepoClient) GetTopWords(ctx context.Context, in *GetTopWordRequest, opts ...grpc.CallOption) (*GetTopWordResponse, error) {
	out := new(GetTopWordResponse)
	err := c.cc.Invoke(ctx, "/wordrepo.WordRepo/GetTopWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordRepoServer is the server API for WordRepo service.
// All implementations should embed UnimplementedWordRepoServer
// for forward compatibility
type WordRepoServer interface {
	// SearchWord finds out if a word exists in the list.
	SearchWord(context.Context, *SearchWordRequest) (*SearchWordResponse, error)
	// UpdateWordList updates the search word list
	UpdateWordList(context.Context, *UpdateWordRequest) (*UpdateWordResponse, error)
	// GetTopWords returns the top 5 words and the counts they are searched
	GetTopWords(context.Context, *GetTopWordRequest) (*GetTopWordResponse, error)
}

// UnimplementedWordRepoServer should be embedded to have forward compatible implementations.
type UnimplementedWordRepoServer struct {
}

func (UnimplementedWordRepoServer) SearchWord(context.Context, *SearchWordRequest) (*SearchWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWord not implemented")
}
func (UnimplementedWordRepoServer) UpdateWordList(context.Context, *UpdateWordRequest) (*UpdateWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWordList not implemented")
}
func (UnimplementedWordRepoServer) GetTopWords(context.Context, *GetTopWordRequest) (*GetTopWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopWords not implemented")
}

// UnsafeWordRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordRepoServer will
// result in compilation errors.
type UnsafeWordRepoServer interface {
	mustEmbedUnimplementedWordRepoServer()
}

func RegisterWordRepoServer(s grpc.ServiceRegistrar, srv WordRepoServer) {
	s.RegisterService(&WordRepo_ServiceDesc, srv)
}

func _WordRepo_SearchWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordRepoServer).SearchWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordrepo.WordRepo/SearchWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordRepoServer).SearchWord(ctx, req.(*SearchWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordRepo_UpdateWordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordRepoServer).UpdateWordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordrepo.WordRepo/UpdateWordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordRepoServer).UpdateWordList(ctx, req.(*UpdateWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordRepo_GetTopWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordRepoServer).GetTopWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordrepo.WordRepo/GetTopWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordRepoServer).GetTopWords(ctx, req.(*GetTopWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WordRepo_ServiceDesc is the grpc.ServiceDesc for WordRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wordrepo.WordRepo",
	HandlerType: (*WordRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchWord",
			Handler:    _WordRepo_SearchWord_Handler,
		},
		{
			MethodName: "UpdateWordList",
			Handler:    _WordRepo_UpdateWordList_Handler,
		},
		{
			MethodName: "GetTopWords",
			Handler:    _WordRepo_GetTopWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wordrepo/wordrepo.proto",
}
